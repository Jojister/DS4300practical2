
PyMongo Notes

Getting Started with PyMongo
- Install PyMongo:
import pymongo

- Connect to MongoDB:
from pymongo import MongoClient
client = MongoClient("mongodb://localhost:27017/")

Working with Databases and Collections
- Access database:
db = client.test_database
# Or, using dictionary-style access
db = client["test-database"]

- Access collection:
collection = db.test_collection
# Or, dictionary-style access
collection = db["test-collection"]

Documents
- JSON-like Python dictionaries:
import datetime
post = {
    "author": "Mike",
    "text": "My first blog post!",
    "tags": ["mongodb", "python", "pymongo"],
    "date": datetime.datetime.now(tz=datetime.timezone.utc)
}

Inserting Documents
- Single document:
posts = db.posts
post_id = posts.insert_one(post).inserted_id

- Bulk inserts:
new_posts = [
    {"author": "Mike", "text": "Another post!", "tags": ["bulk", "insert"], "date": datetime.datetime(2009, 11, 12, 11, 14)},
    {"author": "Eliot", "title": "MongoDB is fun", "text": "and pretty easy too!", "date": datetime.datetime(2009, 11, 10, 10, 45)}
]
result = posts.insert_many(new_posts)

Querying Documents
- Single document (find_one()):
import pprint
pprint.pprint(posts.find_one({"author": "Mike"}))

- Query by ObjectId:
from bson.objectid import ObjectId
document = posts.find_one({'_id': ObjectId(post_id)})

- Multiple documents (find()):
for post in posts.find({"author": "Mike"}):
    pprint.pprint(post)

Counting Documents
posts.count_documents({"author": "Mike"})

Range Queries
- Example:
d = datetime.datetime(2009, 11, 12, 12)
for post in posts.find({"date": {"$lt": d}}).sort("author"):
    pprint.pprint(post)

Indexing
- Create unique index:
db.profiles.create_index([("user_id", pymongo.ASCENDING)], unique=True)

Aggregation Framework Examples
- Setup example data:
db = MongoClient().aggregation_example
result = db.things.insert_many([
    {"x": 1, "tags": ["dog", "cat"]},
    {"x": 2, "tags": ["cat"]},
    {"x": 2, "tags": ["mouse", "cat", "dog"]},
    {"x": 3, "tags": []},
])

- Aggregation pipeline:
from bson.son import SON
pipeline = [
    {"$unwind": "$tags"},
    {"$group": {"_id": "$tags", "count": {"$sum": 1}}},
    {"$sort": SON([("count", -1), ("_id", -1)])},
]
pprint.pprint(list(db.things.aggregate(pipeline)))

- Explain aggregation:
from pymongoexplain import ExplainableCollection
ExplainableCollection(collection).aggregate(pipeline)

- Command method:
db.command('aggregate', 'things', pipeline=pipeline, explain=True)

Aggregation allows data reshaping, computed fields, and extraction of sub-fields.
