Chapter 12: Binary Search Trees
A binary search tree is a binary tree with a
special property called the BST-property,
which is given as follows:
⋆ For all nodes x and y, if y belongs to the
left subtree of x, then the key at y is less
than the key at x, and if y belongs to the
right subtree of x, then the key at y is
greater than the key at x.
We will assume that the keys of a BST are
pairwise distinct.
Each node has the following attributes:
•p, left, and right, which are pointers to the
parent, the left child, and the right child,
respectively, and
•key, which is key stored at the node.
1
An example
4
2
3
5
6
7
12
9
19
8 11 15
20
2
Traversal of the Nodes in a BST
By “traversal” we mean visiting all the nodes
in a graph. Traversal strategies can be
specified by the ordering of the three objects
to visit: the current node, the left subtree,
and the right subtree. We assume the the left
subtree always comes before the right
subtree. Then there are three strategies.
1. Inorder. The ordering is: the left subtree,
the current node, the right subtree.
2. Preorder. The ordering is: the current
node, the left subtree, the right subtree.
3. Postorder. The ordering is: the left
subtree, the right subtree, the current
node.
3
Inorder Traversal Pseudocode
This recursive algorithm takes as the input a
pointer to a tree and executed inorder
traversal on the tree. While doing traversal it
prints out the key of each node that is visited.
Inorder-Walk(x)
1: if x = nil then return
2: Inorder-Walk(left[x])
3: Print key[x]
4: Inorder-Walk(right[x])
We can write a similar pseudocode for
preorder and postorder.
4
2
1
3
1 3
2 2
3
1
inorder
preorder postorder
7
4
12
2
6
9
19
3
5
8 11 15
20
What is the outcome of
inorder traversal on this BST?
How about postorder traversal
and preorder traversal?
5
Inorder traversal gives: 2, 3,
4, 5, 6, 7, 8 , 9, 11, 12, 15,
19, 20.
Preorder traversal gives: 7, 4,
2, 3, 6, 5, 12, 9, 8, 11, 19,
15, 20.
Postorder traversal gives: 3,
2, 5, 6, 4, 8, 11, 9, 15, 20,
19, 12, 7.
So, inorder travel on a BST
finds the keys in
nondecreasing order!
6
Operations on BST
1. Searching for a key
We assume that a key and the subtree in
which the key is searched for are given as an
input. We’ll take the full advantage of the
BST-property.
Suppose we are at a node. If the node has
the key that is being searched for, then the
search is over. Otherwise, the key at the
current node is either strictly smaller than the
key that is searched for or strictly greater
than the key that is searched for. If the
former is the case, then by the BST property,
all the keys in th left subtree are strictly less
than the key that is searched for. That means
that we do not need to search in the left
subtree. Thus, we will examine only the right
subtree. If the latter is the case, by symmetry
we will examine only the right subtree.
7
Algorithm
Here k is the key that is searched for and x is
the start node.
BST-Search(x, k)
1: y ←x
2: while y ̸= nil do
3: if key[y] = k then return y
4: else if key[y] < k then y ←right[y]
5: else y ←left[y]
6: return (“NOT FOUND”)
8
An Example
7
4
search for 8
11
2 6 9 13
NIL
What is the running time of
search?
9
2. The Maximum and the Minimum
To find the minimum identify the leftmost
node, i.e. the farthest node you can reach by
following only left branches.
To find the maximum identify the rightmost
node, i.e. the farthest node you can reach by
following only right branches.
BST-Minimum(x)
1: if x = nil then return (“Empty Tree”)
2: y ←x
3: while left[y] ̸= nil do y ←left[y]
4: return (key[y])
BST-Maximum(x)
1: if x = nil then return (“Empty Tree”)
2: y ←x
3: while right[y] ̸= nil do y ←right[y]
4: return (key[y])
10
3. Insertion
Suppose that we need to insert a node z such
that k = key[z]. Using binary search we find a
nil such that replacing it by z does not break
the BST-property.
11
BST-Insert(x, z, k)
1: if x = nil then return “Error”
2: y ←x
3: while true do {
4: if key[y] < k
5: then z ←left[y]
6: else z ←right[y]
7: if z = nil break
8: }
9: if key[y] > k then left[y]←z
10: else right[p[y]]←z
12
4. The Successor and The Predecessor
The successor (respectively, the predecessor)
of a key k in a search tree is the smallest
(respectively, the largest) key that belongs to
the tree and that is strictly greater than
(respectively, less than) k.
The idea for finding the successor of a given
node x.
•If x has the right child, then the successor
is the minimum in the right subtree of x.
•Otherwise, the successor is the parent of
the farthest node that can be reached
from x by following only right branches
backward.
13
An Example
4
2
3
5
6
23
7 25
12
9
19
8 11 15
20
14
Algorithm
BST-Successor(x)
1: if right[x] ̸= nil then
2: { y ←right[x]
3: while left[y] ̸= nil do y ←left[y]
4: return (y) }
5: else
6: { y ←x
7: while right[p[x]] = x do y ←p[x]
8: if p[x] ̸= nil then return (p[x])
9: else return (“NO SUCCESSOR”) }
15
The predecessor can be found similarly with
the roles of left and right exchanged and with
the roles of maximum and minimum
exchanged.
For which node is the
successor undefined?
What is the running time of
the successor algorithm?
16
5. Deletion
Suppose we want to delete a node z.
1. If z has no children, then we will just
replace z by nil.
2. If z has only one child, then we will
promote the unique child to z’s place.
3. If z has two children, then we will identify
z’s successor. Call it y. The successor y
either is a leaf or has only the right child.
Promote y to z’s place. Treat the loss of
y using one of the above two solutions.
17
5
1
6
3
2 4
5
1
6
3
2 4
5
1
6
3
2 4
8
7
8
7
8
7
8
11
5
11
9 13
1
6
9 13
10 10
3
2 4
8
11
5
11
9 13
3
6 9 13
2
4
7
10 10
9
11
9 13
10
1
5
3
6
2 4
11
10
13
18
Algorithm
This algorithm deletes z from BST T.
BST-Delete(T, z)
1: if left[z] = nil or right[z] = nil
2: then y ←z
3: else y ←BST-Successor(z)
4: y is the node that’s actually removed.
5: Here y does not have two children.
6: if left[y] ̸= nil
7: then x ←left[y]
8: else x ←right[y]
9: x is the node that’s moving to y’s position.
10: if x ̸= nil then p[x]←p[y]
11: p[x] is reset If x isn’t NIL.
12: Resetting is unnecessary if x is NIL.
19
Algorithm (cont’d)
13: if p[y] = nil then root[T]←x
14: If y is the root, then x becomes the root.
15: Otherwise, do the following.
16: else if y = left[p[y]]
17: then left[p[y]]←x
18: If y is the left child of its parent, then
19: Set the parent’s left child to x.
20: else right[p[y]]←x
21: If y is the right child of its parent, then
22: Set the parent’s right child to x.
23: if y ̸= z then
24: { key[z]←key[y]
25: Move other data from y to z }
27: return (y)
20
Summary of Eﬃciency Analysis
Theorem A On a binary search tree of
height h, Search, Minimum, Maximum,
Successor, Predecessor, Insert, and
Delete can be made to run in O(h) time.
21
Randomly built BST
Suppose that we insert n distinct keys into an
initially empty tree. Assuming that the n!
permutations are equally likely to occur, what
is the average height of the tree?
To study this question we consider the
process of constructing a tree T by inserting
in order randomly selected n distinct keys
to an initially empty tree. Here the actually
values of the keys do not matter. What
matters is the position of the inserted key in
the n keys.
22
The Process of Construction
So, we will view the process as follows:
A key x from the keys is selected uniformly at
random and is inserted to the tree. Then all
the other keys are inserted. Here all the keys
greater than x go into the right subtree of x
and all the keys smaller than x go into the
left subtree. Thus, the height of the tree
thus constructed is one plus the larger of the
height of the left subtree and the height of
the right subtree.
23
Random Variables
n = number of keys
Xn = height of the tree of n keys
Yn = 2Xn
.
We want an upper bound on E[Yn].
E[Yn] =
For n ≥2, we have
1
n
 n
i=1
2E[max{Yi−1, Yn−i}] .
E[max{Yi−1, Yn−i}] ≤ E[Yi−1 + Yn−i]
≤ E[Yi−1] + E[Yn−i]
Collecting terms:
4
E[Yn] ≤
n
n−1
i=1
E[Yi].
24
Analysis
We claim that for all n ≥1 E[Yn] ≤1
4
n+3
3.
We prove this by induction on n.
Base case: E[Y1] = 20 = 1.
n
n−1
i=1
E[Yi]
Induction step: We have
4
E[Yn] ≤
Using the fact that
n−1
i=0
i + 3
3
E[Yn] ≤
4
n·
=
n + 3
4
1
4·
n + 3
4
1
4·
n + 3
3
E[Yn] ≤
25
Jensen’s inequality
A function f is convex if for all x and y,
x < y, and for all λ, 0 ≤λ ≤1,
f(λx + (1−λ)y) ≤λf(x) + (1−λ)f(y)
Jensen’s inequality states that for all random
variables X and for all convex function f
f(E[X]) ≤E[f(X)].
Let this X be Xn and f(x) = 2x
. Then
E[f(X)] = E[Yn]. So, we have
2E[Xn] ≤
1
4
n + 3
3.
The right-hand side is at most (n + 3)3
. By
taking the log of both sides, we have
E[Xn] = O(logn).
Thus the average height of a randomly build
BST is O(logn).
26